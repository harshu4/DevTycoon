// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AskWork extends ethereum.Event {
  get params(): AskWork__Params {
    return new AskWork__Params(this);
  }
}

export class AskWork__Params {
  _event: AskWork;

  constructor(event: AskWork) {
    this._event = event;
  }

  get workid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get worker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get givenblock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalblock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CompleteWork extends ethereum.Event {
  get params(): CompleteWork__Params {
    return new CompleteWork__Params(this);
  }
}

export class CompleteWork__Params {
  _event: CompleteWork;

  constructor(event: CompleteWork) {
    this._event = event;
  }

  get workid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get worker(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TakeWork extends ethereum.Event {
  get params(): TakeWork__Params {
    return new TakeWork__Params(this);
  }
}

export class TakeWork__Params {
  _event: TakeWork;

  constructor(event: TakeWork) {
    this._event = event;
  }

  get workid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get worker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startblock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endblock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lockedcoffe(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lockedchocolate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get lockedenergy(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpgradeComputer extends ethereum.Event {
  get params(): UpgradeComputer__Params {
    return new UpgradeComputer__Params(this);
  }
}

export class UpgradeComputer__Params {
  _event: UpgradeComputer;

  constructor(event: UpgradeComputer) {
    this._event = event;
  }

  get upgrade(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get worker(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class faucet extends ethereum.Event {
  get params(): faucet__Params {
    return new faucet__Params(this);
  }
}

export class faucet__Params {
  _event: faucet;

  constructor(event: faucet) {
    this._event = event;
  }

  get worker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Gamecontract__getworkdetailResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Gamecontract extends ethereum.SmartContract {
  static bind(address: Address): Gamecontract {
    return new Gamecontract("Gamecontract", address);
  }

  chocolate(): Address {
    let result = super.call("chocolate", "chocolate():(address)", []);

    return result[0].toAddress();
  }

  try_chocolate(): ethereum.CallResult<Address> {
    let result = super.tryCall("chocolate", "chocolate():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coffee(): Address {
    let result = super.call("coffee", "coffee():(address)", []);

    return result[0].toAddress();
  }

  try_coffee(): ethereum.CallResult<Address> {
    let result = super.tryCall("coffee", "coffee():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentval(): BigInt {
    let result = super.call("currentval", "currentval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentval", "currentval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drinks(): Address {
    let result = super.call("drinks", "drinks():(address)", []);

    return result[0].toAddress();
  }

  try_drinks(): ethereum.CallResult<Address> {
    let result = super.tryCall("drinks", "drinks():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getworkdetail(): Gamecontract__getworkdetailResult {
    let result = super.call(
      "getworkdetail",
      "getworkdetail():(uint256,uint256)",
      []
    );

    return new Gamecontract__getworkdetailResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getworkdetail(): ethereum.CallResult<Gamecontract__getworkdetailResult> {
    let result = super.tryCall(
      "getworkdetail",
      "getworkdetail():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gamecontract__getworkdetailResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  viewlevel(): BigInt {
    let result = super.call("viewlevel", "viewlevel():(uint256)", []);

    return result[0].toBigInt();
  }

  try_viewlevel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("viewlevel", "viewlevel():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  work(): Address {
    let result = super.call("work", "work():(address)", []);

    return result[0].toAddress();
  }

  try_work(): ethereum.CallResult<Address> {
    let result = super.tryCall("work", "work():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CompleteworkCall extends ethereum.Call {
  get inputs(): CompleteworkCall__Inputs {
    return new CompleteworkCall__Inputs(this);
  }

  get outputs(): CompleteworkCall__Outputs {
    return new CompleteworkCall__Outputs(this);
  }
}

export class CompleteworkCall__Inputs {
  _call: CompleteworkCall;

  constructor(call: CompleteworkCall) {
    this._call = call;
  }
}

export class CompleteworkCall__Outputs {
  _call: CompleteworkCall;

  constructor(call: CompleteworkCall) {
    this._call = call;
  }
}

export class GetStartedCall extends ethereum.Call {
  get inputs(): GetStartedCall__Inputs {
    return new GetStartedCall__Inputs(this);
  }

  get outputs(): GetStartedCall__Outputs {
    return new GetStartedCall__Outputs(this);
  }
}

export class GetStartedCall__Inputs {
  _call: GetStartedCall;

  constructor(call: GetStartedCall) {
    this._call = call;
  }
}

export class GetStartedCall__Outputs {
  _call: GetStartedCall;

  constructor(call: GetStartedCall) {
    this._call = call;
  }
}

export class GetworkCall extends ethereum.Call {
  get inputs(): GetworkCall__Inputs {
    return new GetworkCall__Inputs(this);
  }

  get outputs(): GetworkCall__Outputs {
    return new GetworkCall__Outputs(this);
  }
}

export class GetworkCall__Inputs {
  _call: GetworkCall;

  constructor(call: GetworkCall) {
    this._call = call;
  }
}

export class GetworkCall__Outputs {
  _call: GetworkCall;

  constructor(call: GetworkCall) {
    this._call = call;
  }
}

export class TakeworkCall extends ethereum.Call {
  get inputs(): TakeworkCall__Inputs {
    return new TakeworkCall__Inputs(this);
  }

  get outputs(): TakeworkCall__Outputs {
    return new TakeworkCall__Outputs(this);
  }
}

export class TakeworkCall__Inputs {
  _call: TakeworkCall;

  constructor(call: TakeworkCall) {
    this._call = call;
  }

  get coffeen(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get chocolaten(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get energyn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TakeworkCall__Outputs {
  _call: TakeworkCall;

  constructor(call: TakeworkCall) {
    this._call = call;
  }
}

export class UpgratecomputerCall extends ethereum.Call {
  get inputs(): UpgratecomputerCall__Inputs {
    return new UpgratecomputerCall__Inputs(this);
  }

  get outputs(): UpgratecomputerCall__Outputs {
    return new UpgratecomputerCall__Outputs(this);
  }
}

export class UpgratecomputerCall__Inputs {
  _call: UpgratecomputerCall;

  constructor(call: UpgratecomputerCall) {
    this._call = call;
  }
}

export class UpgratecomputerCall__Outputs {
  _call: UpgratecomputerCall;

  constructor(call: UpgratecomputerCall) {
    this._call = call;
  }
}
